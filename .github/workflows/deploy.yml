name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: admin
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/admin/database-lab4/lab4_for_bd

            # Switch to main branch
            git fetch origin
            git checkout main
            git pull origin main

            # Activate virtual environment
            source venv/bin/activate

            # Install/update dependencies
            pip install -r app/requirements.txt

            # Set environment variable for MySQL
            export USE_MYSQL=true

            # Kill old process if exists (before starting new one)
            echo "🔍 Checking for old Flask processes..."
            
            # Try to gracefully stop old processes
            if pgrep -f "python run_production.py" > /dev/null 2>&1; then
              OLD_PIDS=$(pgrep -f "python run_production.py")
              echo "Found old Flask process(es): $OLD_PIDS"
              echo "Stopping old process(es)..."
              
              # Graceful shutdown with SIGTERM
              pkill -TERM -f "python run_production.py" || true
              sleep 3
              
              # Force kill if still running
              if pgrep -f "python run_production.py" > /dev/null 2>&1; then
                echo "⚠️ Processes still running, force killing..."
                pkill -9 -f "python run_production.py" || true
                sleep 2
              fi
              
              echo "✅ Old process(es) stopped"
            else
              echo "No old processes found"
            fi

            # Start new Flask application in background with production server
            echo "🚀 Starting new Flask application..."
            nohup python run_production.py > flask.log 2>&1 &
            NEW_PID=$!
            echo "Started new Flask process with PID: $NEW_PID"

            # Wait for application to initialize
            sleep 8

            # Check if new Flask is running
            if ps -p $NEW_PID > /dev/null 2>&1; then
              echo "✅ Flask application started successfully (PID: $NEW_PID)"
              
              # Test local endpoint
              sleep 2
              if curl -s http://localhost:5000/candidates > /dev/null 2>&1; then
                echo "✅ API endpoint responding"
              else
                echo "⚠️ API endpoint not yet responding (might need more time)"
              fi
            else
              echo "❌ Flask application failed to start"
              echo "Last 50 lines of log:"
              tail -50 flask.log
              exit 1
            fi

            echo "🚀 Deployment completed successfully at $(date)"

      - name: Health Check
        run: |
          sleep 5
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.AWS_EC2_HOST }}:5000/candidates)
          if [ $response -eq 200 ]; then
            echo "✅ Application is running successfully!"
            echo "🌐 API Endpoint: http://${{ secrets.AWS_EC2_HOST }}:5000/candidates"
            echo "📚 Swagger UI: http://${{ secrets.AWS_EC2_HOST }}:5000/apidocs/"
          else
            echo "❌ Health check failed with status code: $response"
            exit 1
          fi

      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "🎉 Application deployed to production"
          echo "📝 Check Swagger documentation at: http://${{ secrets.AWS_EC2_HOST }}:5000/apidocs/"

      - name: Notify on failure
        if: failure()
        run: echo "❌ Deployment failed! Check logs for details"
