name: Deploy to AWS EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: admin
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/admin/database-lab4/lab4_for_bd

            # Оновлення коду
            git fetch origin
            git checkout main
            git pull origin main

            # Активуємо або створюємо віртуальне середовище
            python3 -m venv venv || true
            source venv/bin/activate

            # Встановлення залежностей
            pip install --upgrade pip
            pip install -r app/requirements.txt

            # Змінні середовища
            export USE_MYSQL=true

            # 🔍 Зупинка старих процесів
            echo "🔍 Stopping old Flask/Waitress process if exists..."
            if [ -f app.pid ]; then
              OLD_PID=$(cat app.pid || echo "")
              if [ -n "$OLD_PID" ] && kill -0 $OLD_PID 2>/dev/null; then
                echo "Stopping PID $OLD_PID"
                kill -TERM $OLD_PID >/dev/null 2>&1 || true
                sleep 3
                kill -9 $OLD_PID >/dev/null 2>&1 || true
              fi
              rm -f app.pid
            fi

            # 🚀 Запуск нового сервера у фоновому режимі
            echo "🚀 Starting new Flask/Waitress application..."
            nohup python3 run_production.py > flask.log 2>&1 & echo $! > app.pid
            NEW_PID=$(cat app.pid)
            echo "Started new process with PID: $NEW_PID"

            # Очікуємо, поки сервер стартує
            sleep 8
            if kill -0 $NEW_PID 2>/dev/null; then
              echo "✅ Flask/Waitress is running (PID $NEW_PID)"
              curl -s http://localhost:5000/health || true
            else
              echo "❌ Flask/Waitress failed to start"
              tail -50 flask.log || true
              exit 1
            fi

      - name: Health Check
        run: |
          sleep 5
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.AWS_EC2_HOST }}:5000/health)
          if [ $response -eq 200 ]; then
            echo "✅ Application is running successfully!"
            echo "🌐 API Endpoint: http://${{ secrets.AWS_EC2_HOST }}:5000/candidates"
            echo "📚 Swagger UI: http://${{ secrets.AWS_EC2_HOST }}:5000/apidocs/"
          else
            echo "❌ Health check failed with status code: $response"
            tail -50 /home/admin/database-lab4/lab4_for_bd/flask.log || true
            exit 1
          fi

      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "🎉 Application deployed to production"
          echo "📝 Swagger documentation: http://${{ secrets.AWS_EC2_HOST }}:5000/apidocs/"

      - name: Notify on failure
        if: failure()
        run: echo "❌ Deployment failed! Check logs for details"
